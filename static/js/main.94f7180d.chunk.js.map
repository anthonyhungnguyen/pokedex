{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","num","img","listItems","type","map","item","react_default","a","createElement","className","alt","concat","src","substring","length","CardList","pokemons","pokemon","i","components_Card","key","SearchBox","onSearchChange","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","event","searchField","target","value","_this2","fetch","then","response","json","poke","_this$state","filteredPokemons","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAeeA,EAbF,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,GAASC,GAAsBF,EAA3BG,IAA2BH,EAAtBE,MAAME,EAAgBJ,EAAhBI,IACxBC,EADwCL,EAAXM,KACZC,IAAI,SAAAC,GAAI,OAAIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAA2BJ,KAC5E,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,QAAAC,OAAUb,GAAMc,IAAKX,EAAIY,UAAU,EAAG,GAAK,IAAMZ,EAAIY,UAAU,EAAGZ,EAAIa,UAC9ER,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BAA8BV,GAC5CO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAgCP,MCYnCa,EAlBE,SAAAlB,GAAkB,IAAfmB,EAAenB,EAAfmB,SACnB,OACCV,EAAAC,EAAAC,cAAA,WACEQ,EAASZ,IAAI,SAACa,EAASC,GACvB,OACCZ,EAAAC,EAAAC,cAACW,EAAD,CACCC,IAAKF,EACLpB,GAAIkB,EAASE,GAAGpB,GAChBC,KAAMiB,EAASE,GAAGnB,KAClBE,IAAKe,EAASE,GAAGjB,IACjBE,KAAMa,EAASE,GAAGf,WCETkB,EAbG,SAAAxB,GAAwB,IAArByB,EAAqBzB,EAArByB,eACpB,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACCC,UAAU,mCACVN,KAAK,SACLoB,YAAY,iBACZC,SAAUF,MCHCG,EAJA,SAAAC,GACd,OAAOpB,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CAAEC,SAAU,OAAQC,OAAQ,WAAaH,EAAMI,WCgBpDC,cAhBd,SAAAA,EAAYL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMT,KACDa,MAAQ,CACZC,UAAW,GAHMR,iFAODS,EAAOC,GACxBP,KAAKQ,SAAS,CAAEH,UAAU,qCAI1B,OAAOL,KAAKI,MAAMC,SAAWlC,EAAAC,EAAAC,cAAA,uCAAqC2B,KAAKT,MAAMI,gBAbpDc,aC8CZC,cAzCd,SAAAA,IAAc,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACbb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QAODb,eAAiB,SAAAwB,GAChBd,EAAKW,SAAS,CAAEI,YAAaD,EAAME,OAAOC,SAP1CjB,EAAKO,MAAQ,CACZvB,SAAc,GACd+B,YAAc,IAJFf,mFAYM,IAAAkB,EAAAf,KACnBgB,MAAM,iFACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKP,SAAS,CAAE3B,SAAUuC,EAAI,6CAGrC,IAAAC,EAC0BrB,KAAKI,MAA/BvB,EADAwC,EACAxC,SAAU+B,EADVS,EACUT,YACZU,EAAmBzC,EAAS0C,OAAO,SAAAzC,GAAO,OAC/CA,EAAQlB,KAAK4D,cAAcC,SAASb,EAAYY,iBAEjD,OAAQ3C,EAASF,OAKhBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,WACAH,EAAAC,EAAAC,cAACqD,EAAD,CAAWvC,eAAgBa,KAAKb,iBAChChB,EAAAC,EAAAC,cAACsD,EAAD,KACCxD,EAAAC,EAAAC,cAACuD,EAAD,KACCzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUhD,SAAUyC,OATvBnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,mBA1BcmC,aCMEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.94f7180d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, num, name, img, type }) => {\r\n\tconst listItems = type.map(item => <li className='pa2 ba bw2 br4 grow dib'>{item}</li>);\r\n\treturn (\r\n\t\t<div className='bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt={`robot${id}`} src={img.substring(0, 4) + 's' + img.substring(4, img.length)} />\r\n\t\t\t<div>\r\n\t\t\t\t<h3 className='hover-light-red f3 lh-copy'>{name}</h3>\r\n\t\t\t\t<ul className='list pl0 flex justify-around'>{listItems}</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ pokemons }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{pokemons.map((pokemon, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tid={pokemons[i].id}\r\n\t\t\t\t\t\tname={pokemons[i].name}\r\n\t\t\t\t\t\timg={pokemons[i].img}\r\n\t\t\t\t\t\ttype={pokemons[i].type}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--purple bg-light-yellow'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='type to search'\r\n\t\t\t\tonChange={onSearchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n\treturn <div style={{ overflow: 'auto', height: '1080px' }}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn this.state.hasError ? <h1>Ooooops. That is not good</h1> : this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tpokemons    : [],\n\t\t\tsearchField : ''\n\t\t};\n\t}\n\n\tonSearchChange = event => {\n\t\tthis.setState({ searchField: event.target.value });\n\t};\n\n\tcomponentDidMount() {\n\t\tfetch('https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json')\n\t\t\t.then(response => response.json())\n\t\t\t.then(poke => this.setState({ pokemons: poke['pokemon'] }));\n\t}\n\n\trender() {\n\t\tconst { pokemons, searchField } = this.state;\n\t\tconst filteredPokemons = pokemons.filter(pokemon =>\n\t\t\tpokemon.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\treturn !pokemons.length ? (\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f-subheadline lh-title'>Loading</h1>\n\t\t\t</div>\n\t\t) : (\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f-subheadline lh-title'>Pokedex</h1>\n\t\t\t\t<SearchBox onSearchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList pokemons={filteredPokemons} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}